{"version":3,"sources":["../src/http-browser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAM,OAAO,SAAP,IAAO,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ;SAAqB,uBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACjE,QAAM,MAAM,IAAI,SAAJ,EAAN,CAD2D;AAEjE,QAAI,IAAJ,CAAS,IAAT,EAAe,GAAf,EAFiE;AAGjE,QAAI,gBAAE,EAAF,CAAK,MAAL,EAAa,IAAb,CAAJ,EAAwB;AACtB,aAAO,KAAK,SAAL,CAAe,IAAf,CAAP,CADsB;AAEtB,UAAI,gBAAJ,CAAqB,cAArB,EAAqC,gCAArC,EAFsB;KAAxB;AAIA,QAAI,kBAAJ,GAAyB,YAAM;AAC7B,UAAI,IAAI,UAAJ,KAAmB,CAAnB,EAAsB;AACxB,YAAM,kBAAkB,EAAlB;AADkB,0CAExB,CACE,IAAI,MAAJ,EACA,IAAI,UAAJ,EACA,IAAI,YAAJ,EACA,eAJF,EAKE,OALF,EAME,MANF,EAFwB;OAA1B;KADuB,CAPwC;AAoBjE,QAAI,IAAJ,CAAS,IAAT,EApBiE;GAArB;CAAjC;;AAyBb,IAAM,MAAM;AACV,8BADU;AAEV,wCAFU;;;;;;;AASV,kCAAY;;AAEV,WAAO,IAAI,cAAJ,EAAP,CAFU;GATF;;;;;;;AAoBV,oBAAI,KAAK;AAAE,WAAO,KAAK,KAAL,EAAY,GAAZ,CAAP,CAAF;GApBC;;;;;;;;;;;;;AAkCV,sBAAK,KAAK,MAAM;AAAE,WAAO,KAAK,MAAL,EAAa,GAAb,EAAkB,IAAlB,CAAP,CAAF;GAlCN;;;;;;;;;;;;;AAgDV,oBAAI,KAAK,MAAM;AAAE,WAAO,KAAK,KAAL,EAAY,GAAZ,EAAiB,IAAjB,CAAP,CAAF;GAhDL;;;;;;;;;;;AA4DV,2BAAO,KAAK;AAAE,WAAO,KAAK,QAAL,EAAe,GAAf,CAAP,CAAF;GA5DF;CAAN;;kBAiES","file":"http-browser.js","sourcesContent":["/* global XMLHttpRequest */\n/* eslint no-use-before-define:0 */\n\nimport R from 'ramda';\nimport Promise from 'bluebird';\nimport { HttpError, HttpParseError } from './errors';\nimport { handleRequestComplete } from './shared';\n\n\n\nconst send = (verb, url, data) => new Promise((resolve, reject) => {\n  const xhr = api.createXhr();\n  xhr.open(verb, url);\n  if (R.is(Object, data)) {\n    data = JSON.stringify(data);\n    xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n  }\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState === 4) {\n      const responseHeaders = {}; // Not passed from browser (for the time being).\n      handleRequestComplete(\n        xhr.status,\n        xhr.statusText,\n        xhr.responseText,\n        responseHeaders,\n        resolve,\n        reject\n      );\n    }\n  };\n  xhr.send(data);\n});\n\n\n\nconst api = {\n  HttpError,\n  HttpParseError,\n\n  /**\n  * Factory for the XHR object.\n  * Swap this method out to a fake object for testing.\n  * See: http://sinonjs.org/docs/#server\n  */\n  createXhr() {\n    // NB: Only available when in the browser.\n    return new XMLHttpRequest();\n  },\n\n\n  /**\n  * Perform a GET operation against the given URL.\n  * @param url: URL of the resource.\n  * @return promise.\n  */\n  get(url) { return send('GET', url); },\n\n\n  /**\n  * Performs a POST operation against the given URL.\n  *\n  *   In REST/Resource-Oriented systems the POST verb\n  *   means 'create a new resource'.\n  *\n  * @param url:   URL of the resource.\n  * @param data:  The data to send (a primitive value or an object,\n  *               will be transformed and sent as JSON).\n  * @return promise.\n  */\n  post(url, data) { return send('POST', url, data); },\n\n\n  /**\n  * Performs a PUT operation against the given URL.\n  *\n  *   In REST/Resource-Oriented systems the PUT verb\n  *   means 'update a resource'.\n  *\n  * @param url:   URL of the resource.\n  * @param data:  The data to send (a primitive value or an object,\n  *               will be transformed and sent as JSON).\n  * @return promise.\n  */\n  put(url, data) { return send('PUT', url, data); },\n\n\n  /**\n  * Performs a DELETE operation against the given URL.\n  *\n  *   In REST/Resource-Oriented systems the DELETE verb\n  *   means 'remove the resource'.\n  *\n  * @param url:   URL of the resource.\n  * @return promise.\n  */\n  delete(url) { return send('DELETE', url); },\n};\n\n\n\nexport default api;\n"]}
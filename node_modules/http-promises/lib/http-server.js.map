{"version":3,"sources":["../src/http-server.js"],"names":[],"mappings":"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","file":"http-server.js","sourcesContent":["import R from 'ramda';\nimport nodeUrl from 'url';\nimport nodeHttp from 'http';\nimport nodeHttps from 'https';\nimport Promise from 'bluebird';\nimport { HttpError, HttpParseError } from './errors';\nimport { handleRequestComplete } from './shared';\n\n\nconst send = (verb, url, data, headers = {}) => new Promise((resolve, reject) => {\n  // Prepare the data to send.\n  const hasData = data !== undefined;\n  if (R.is(Object, data)) {\n    data = JSON.stringify(data);\n    headers['Content-Type'] = 'application/json;charset=UTF-8';\n  }\n  if (hasData) {\n    headers['Content-Length'] = data.toString().length;\n  }\n\n  url = nodeUrl.parse(url);\n  const options = {\n    headers,\n    hostname: url.hostname,\n    port: url.port,\n    path: url.path,\n    method: verb,\n    protocol: url.protocol,\n  };\n\n  // Setup the request.\n  const httpLibrary = url.protocol === 'https:' ? nodeHttps : nodeHttp;\n  const req = httpLibrary.request(options, (res) => {\n    let responseText = '';\n    res.setEncoding('utf8');\n    res.on('data', d => { responseText += d; });\n    res.on('end', () => {\n      handleRequestComplete(\n        res.statusCode,\n        res.statusMessage,\n        responseText,\n        res.headers,\n        resolve,\n        reject\n      );\n    });\n  });\n\n  // Listen transport for error.\n  // NB: This is not an expected status-code error, but rather\n  //     an error with the HTTP connection.\n  req.on('error', (err) => { reject(err); });\n\n  // Initiate the request.\n  if (hasData) { req.write(data); }\n  req.end();\n});\n\n\n/**\n * Creates a new API object.\n */\nconst getApi = (headers = {}) => {\n  headers = R.clone(headers);\n  return {\n    HttpError,\n    HttpParseError,\n    headers,\n\n\n    /**\n     * Adds the given key:value pair as a header.\n     * @param {string} key:   The name of the header.\n     * @param {string} value: The value of the header.\n     * @return a new API object with the added header (chainable).\n     */\n    header(key, value) {\n      if (R.isNil(key)) {\n        throw new Error(`A key for the HTTP header is required.`);\n      }\n      if (R.isNil(value)) {\n        throw new Error(`A value for the '${ key }' HTTP header is required.`);\n      }\n      const result = getApi(headers);\n      result.headers[key] = value;\n      return result;\n    },\n\n\n    /**\n    * Perform a GET operation against the given URL.\n    * @param url: URL of the resource.\n    * @return promise.\n    */\n    get(url) { return send('GET', url, undefined, headers); },\n\n\n    /**\n    * Performs a POST operation against the given URL.\n    *\n    *   In REST/Resource-Oriented systems the POST verb\n    *   means 'create a new resource'.\n    *\n    * @param url:   URL of the resource.\n    * @param data:  The data to send (a primitive value or an object,\n    *               will be transformed and sent as JSON).\n    * @return promise.\n    */\n    post(url, data) { return send('POST', url, data, headers); },\n\n\n    /**\n    * Performs a PUT operation against the given URL.\n    *\n    *   In REST/Resource-Oriented systems the PUT verb\n    *   means 'update a resource'.\n    *\n    * @param url:   URL of the resource.\n    * @param data:  The data to send (a primitive value or an object,\n    *               will be transformed and sent as JSON).\n    * @return promise.\n    */\n    put(url, data) { return send('PUT', url, data, headers); },\n\n\n    /**\n    * Performs a DELETE operation against the given URL.\n    *\n    *   In REST/Resource-Oriented systems the DELETE verb\n    *   means 'remove the resource'.\n    *\n    * @param url:   URL of the resource.\n    * @return promise.\n    */\n    delete(url) { return send('DELETE', url, undefined, headers); },\n  };\n};\n\n\n\n\nconst api = getApi();\nexport default api;\n"]}
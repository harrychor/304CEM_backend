'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpParseError = exports.HttpError = undefined;

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Describes an error that occured during an XMLHttpRequest operation.
 */

var HttpError = exports.HttpError = function (_Error) {
  _inherits(HttpError, _Error);

  function HttpError(status, message, statusText) {
    _classCallCheck(this, HttpError);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(HttpError).call(this));

    if (_ramda2.default.isNil(message) || _ramda2.default.isEmpty(message)) {
      message = 'Failed while making Http request.';
    }
    _this.status = status || 500;
    _this.message = message;
    _this.statusText = statusText;
    return _this;
  }

  return HttpError;
}(Error);

/**
 * Describes an error resulting from parsing response
 * data from an HTTP request.
 */

var HttpParseError = exports.HttpParseError = function (_Error2) {
  _inherits(HttpParseError, _Error2);

  function HttpParseError(responseText, parseError) {
    _classCallCheck(this, HttpParseError);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(HttpParseError).call(this));

    _this2.message = 'Failed to parse: "' + responseText + '"';
    _this2.responseText = responseText;
    _this2.parseError = parseError;
    return _this2;
  }

  return HttpParseError;
}(Error);
//# sourceMappingURL=errors.js.map
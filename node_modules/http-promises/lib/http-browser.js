'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _errors = require('./errors');

var _shared = require('./shared');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global XMLHttpRequest */
/* eslint no-use-before-define:0 */

var send = function send(verb, url, data) {
  return new _bluebird2.default(function (resolve, reject) {
    var xhr = api.createXhr();
    xhr.open(verb, url);
    if (_ramda2.default.is(Object, data)) {
      data = JSON.stringify(data);
      xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
    }
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        var responseHeaders = {}; // Not passed from browser (for the time being).
        (0, _shared.handleRequestComplete)(xhr.status, xhr.statusText, xhr.responseText, responseHeaders, resolve, reject);
      }
    };
    xhr.send(data);
  });
};

var api = {
  HttpError: _errors.HttpError,
  HttpParseError: _errors.HttpParseError,

  /**
  * Factory for the XHR object.
  * Swap this method out to a fake object for testing.
  * See: http://sinonjs.org/docs/#server
  */
  createXhr: function createXhr() {
    // NB: Only available when in the browser.
    return new XMLHttpRequest();
  },

  /**
  * Perform a GET operation against the given URL.
  * @param url: URL of the resource.
  * @return promise.
  */
  get: function get(url) {
    return send('GET', url);
  },

  /**
  * Performs a POST operation against the given URL.
  *
  *   In REST/Resource-Oriented systems the POST verb
  *   means 'create a new resource'.
  *
  * @param url:   URL of the resource.
  * @param data:  The data to send (a primitive value or an object,
  *               will be transformed and sent as JSON).
  * @return promise.
  */
  post: function post(url, data) {
    return send('POST', url, data);
  },

  /**
  * Performs a PUT operation against the given URL.
  *
  *   In REST/Resource-Oriented systems the PUT verb
  *   means 'update a resource'.
  *
  * @param url:   URL of the resource.
  * @param data:  The data to send (a primitive value or an object,
  *               will be transformed and sent as JSON).
  * @return promise.
  */
  put: function put(url, data) {
    return send('PUT', url, data);
  },

  /**
  * Performs a DELETE operation against the given URL.
  *
  *   In REST/Resource-Oriented systems the DELETE verb
  *   means 'remove the resource'.
  *
  * @param url:   URL of the resource.
  * @return promise.
  */
  delete: function _delete(url) {
    return send('DELETE', url);
  }
};

exports.default = api;
//# sourceMappingURL=http-browser.js.map
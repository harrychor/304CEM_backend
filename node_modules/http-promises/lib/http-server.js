'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _errors = require('./errors');

var _shared = require('./shared');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var send = function send(verb, url, data) {
  var headers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
  return new _bluebird2.default(function (resolve, reject) {
    // Prepare the data to send.
    var hasData = data !== undefined;
    if (_ramda2.default.is(Object, data)) {
      data = JSON.stringify(data);
      headers['Content-Type'] = 'application/json;charset=UTF-8';
    }
    if (hasData) {
      headers['Content-Length'] = data.toString().length;
    }

    url = _url2.default.parse(url);
    var options = {
      headers: headers,
      hostname: url.hostname,
      port: url.port,
      path: url.path,
      method: verb,
      protocol: url.protocol
    };

    // Setup the request.
    var httpLibrary = url.protocol === 'https:' ? _https2.default : _http2.default;
    var req = httpLibrary.request(options, function (res) {
      var responseText = '';
      res.setEncoding('utf8');
      res.on('data', function (d) {
        responseText += d;
      });
      res.on('end', function () {
        (0, _shared.handleRequestComplete)(res.statusCode, res.statusMessage, responseText, res.headers, resolve, reject);
      });
    });

    // Listen transport for error.
    // NB: This is not an expected status-code error, but rather
    //     an error with the HTTP connection.
    req.on('error', function (err) {
      reject(err);
    });

    // Initiate the request.
    if (hasData) {
      req.write(data);
    }
    req.end();
  });
};

/**
 * Creates a new API object.
 */
var getApi = function getApi() {
  var headers = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  headers = _ramda2.default.clone(headers);
  return {
    HttpError: _errors.HttpError,
    HttpParseError: _errors.HttpParseError,
    headers: headers,

    /**
     * Adds the given key:value pair as a header.
     * @param {string} key:   The name of the header.
     * @param {string} value: The value of the header.
     * @return a new API object with the added header (chainable).
     */
    header: function header(key, value) {
      if (_ramda2.default.isNil(key)) {
        throw new Error('A key for the HTTP header is required.');
      }
      if (_ramda2.default.isNil(value)) {
        throw new Error('A value for the \'' + key + '\' HTTP header is required.');
      }
      var result = getApi(headers);
      result.headers[key] = value;
      return result;
    },

    /**
    * Perform a GET operation against the given URL.
    * @param url: URL of the resource.
    * @return promise.
    */
    get: function get(url) {
      return send('GET', url, undefined, headers);
    },

    /**
    * Performs a POST operation against the given URL.
    *
    *   In REST/Resource-Oriented systems the POST verb
    *   means 'create a new resource'.
    *
    * @param url:   URL of the resource.
    * @param data:  The data to send (a primitive value or an object,
    *               will be transformed and sent as JSON).
    * @return promise.
    */
    post: function post(url, data) {
      return send('POST', url, data, headers);
    },

    /**
    * Performs a PUT operation against the given URL.
    *
    *   In REST/Resource-Oriented systems the PUT verb
    *   means 'update a resource'.
    *
    * @param url:   URL of the resource.
    * @param data:  The data to send (a primitive value or an object,
    *               will be transformed and sent as JSON).
    * @return promise.
    */
    put: function put(url, data) {
      return send('PUT', url, data, headers);
    },

    /**
    * Performs a DELETE operation against the given URL.
    *
    *   In REST/Resource-Oriented systems the DELETE verb
    *   means 'remove the resource'.
    *
    * @param url:   URL of the resource.
    * @return promise.
    */
    delete: function _delete(url) {
      return send('DELETE', url, undefined, headers);
    }
  };
};

var api = getApi();
exports.default = api;
//# sourceMappingURL=http-server.js.map
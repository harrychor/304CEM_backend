{"version":3,"sources":["../src/shared.js"],"names":[],"mappings":";;;;;;;;;;;;;IACY;;;;;;;;;;;;;;AAUL,IAAM,0BAAS,SAAT,MAAS,CAAC,IAAD,EAAU;AAC9B,MAAI,gBAAE,KAAF,CAAQ,IAAR,KAAiB,gBAAE,OAAF,CAAU,IAAV,CAAjB,EAAkC;AAAE,WAAO,KAAP,CAAF;GAAtC;AACA,MAAI,KAAK,UAAL,CAAgB,GAAhB,KAAwB,KAAK,QAAL,CAAc,GAAd,CAAxB,EAA4C;AAAE,WAAO,IAAP,CAAF;GAAhD;AACA,MAAI,KAAK,UAAL,CAAgB,GAAhB,KAAwB,KAAK,QAAL,CAAc,GAAd,CAAxB,EAA4C;AAAE,WAAO,IAAP,CAAF;GAAhD;AACA,SAAO,KAAP,CAJ8B;CAAV;;;;;;;;;;;;AAmBf,IAAM,wDAAwB,SAAxB,qBAAwB,CACnC,MADmC,EAC3B,UAD2B,EACf,YADe,EAEnC,eAFmC,EAElB,OAFkB,EAET,MAFS,EAEE;AACrC,MAAI,WAAW,GAAX,EAAgB;;AAElB,WAAO,sBAAc,MAAd,EAAsB,YAAtB,EAAoC,UAApC,CAAP,EAFkB;GAApB,MAGO;;AAEL,QAAI,WAAW,YAAX,CAFC;AAGL,QAAI,OAAO,QAAP,CAAJ,EAAsB;AACpB,UAAI;AACF,mBAAW,KAAK,KAAL,CAAW,QAAX,CAAX,CADE;OAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,eAAO,2BAAmB,YAAnB,EAAiC,GAAjC,CAAP,EADY;AAEZ,eAFY;OAAZ;KAHJ,MAOO,IAAI,aAAa,MAAb,IAAuB,aAAa,OAAb,EAAsB;AACtD,iBAAW,KAAK,MAAL,CAAY,QAAZ,CAAX,CADsD;KAAjD,MAEA,IAAI,KAAK,SAAL,CAAe,QAAf,CAAJ,EAA8B;AACnC,iBAAW,WAAW,QAAX,CAAX,CADmC;KAA9B;AAGP,YAAQ,EAAE,MAAM,QAAN,EAAgB,SAAS,eAAT,EAA1B,EAfK;GAHP;CAHmC","file":"shared.js","sourcesContent":["import R from 'ramda';\nimport * as util from 'js-util';\nimport { HttpError, HttpParseError } from './errors';\n\n\n/**\n * Determines whether the given string is JSON.\n *\n * @param {string} text: The string to example.\n * @return {boolean}\n */\nexport const isJson = (text) => {\n  if (R.isNil(text) || R.isEmpty(text)) { return false; }\n  if (text.startsWith('{') && text.endsWith('}')) { return true; }\n  if (text.startsWith('[') && text.endsWith(']')) { return true; }\n  return false;\n};\n\n\n\n/**\n * Handles a completed HTTP request.\n *\n * @param {integer} status: The HTTP status code.\n * @param {string} responseText: The raw text returned within the response.\n * @param {string} statusText: The text describing the status\n * @param {object} responseHeaders: An object containing the reponse headers.\n * @param {function} resolve: The Promise's success callback.\n * @param {function} reject: The promise's error callback.\n */\nexport const handleRequestComplete = (\n  status, statusText, responseText,\n  responseHeaders, resolve, reject) => {\n  if (status !== 200) {\n    // Failed.\n    reject(new HttpError(status, responseText, statusText));\n  } else {\n    // Success.\n    let response = responseText;\n    if (isJson(response)) {\n      try {\n        response = JSON.parse(response);\n      } catch (err) {\n        reject(new HttpParseError(responseText, err));\n        return;\n      }\n    } else if (response === 'true' || response === 'false') {\n      response = util.toBool(response);\n    } else if (util.isNumeric(response)) {\n      response = parseFloat(response);\n    }\n    resolve({ data: response, headers: responseHeaders });\n  }\n};\n"]}
{"version":3,"sources":["../src/errors.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAMa;;;AACX,WADW,SACX,CAAY,MAAZ,EAAoB,OAApB,EAA6B,UAA7B,EAAyC;0BAD9B,WAC8B;;uEAD9B,uBAC8B;;AAEvC,QAAI,gBAAE,KAAF,CAAQ,OAAR,KAAoB,gBAAE,OAAF,CAAU,OAAV,CAApB,EAAwC;AAAE,gBAAU,mCAAV,CAAF;KAA5C;AACA,UAAK,MAAL,GAAc,UAAU,GAAV,CAHyB;AAIvC,UAAK,OAAL,GAAe,OAAf,CAJuC;AAKvC,UAAK,UAAL,GAAkB,UAAlB,CALuC;;GAAzC;;SADW;EAAkB;;;;;;;IAelB;;;AACX,WADW,cACX,CAAY,YAAZ,EAA0B,UAA1B,EAAsC;0BAD3B,gBAC2B;;wEAD3B,4BAC2B;;AAEpC,WAAK,OAAL,0BAAqC,kBAArC,CAFoC;AAGpC,WAAK,YAAL,GAAoB,YAApB,CAHoC;AAIpC,WAAK,UAAL,GAAkB,UAAlB,CAJoC;;GAAtC;;SADW;EAAuB","file":"errors.js","sourcesContent":["import R from 'ramda';\n\n\n/**\n * Describes an error that occured during an XMLHttpRequest operation.\n */\nexport class HttpError extends Error {\n  constructor(status, message, statusText) {\n    super();\n    if (R.isNil(message) || R.isEmpty(message)) { message = 'Failed while making Http request.'; }\n    this.status = status || 500;\n    this.message = message;\n    this.statusText = statusText;\n  }\n}\n\n\n/**\n * Describes an error resulting from parsing response\n * data from an HTTP request.\n */\nexport class HttpParseError extends Error {\n  constructor(responseText, parseError) {\n    super();\n    this.message = `Failed to parse: \"${ responseText }\"`;\n    this.responseText = responseText;\n    this.parseError = parseError;\n  }\n}\n"]}
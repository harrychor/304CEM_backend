"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Validator = require("./Validator");

var _Validator2 = _interopRequireDefault(_Validator);

var PropTypes = _lodash2["default"].clone(_react2["default"].PropTypes);

/**
 * Common combinations of types.
 */
PropTypes.numberOrString = PropTypes.oneOfType([_react2["default"].PropTypes.number, _react2["default"].PropTypes.string]);

PropTypes.boolOrString = PropTypes.oneOfType([_react2["default"].PropTypes.bool, _react2["default"].PropTypes.string]);

/**
 * Store the parameter values on the returned
 * validator functions so that external tools
 * (such the UIHarness) can display the values.
 */
PropTypes.oneOf = function (enumValues) {
  var result = _react2["default"].PropTypes.oneOf(enumValues);
  var decorate = function decorate(obj) {
    obj.oneOf = enumValues;
    obj.toString = function () {
      return "oneOf(" + enumValues.join(", ") + ")";
    };
  };
  decorate(result);
  decorate(result.isRequired);
  return result;
};

PropTypes.oneOfType = function (types) {
  var result = _react2["default"].PropTypes.oneOfType(types);
  var decorate = function decorate(obj) {
    obj.oneOfType = types;
    obj.toString = function () {
      var typeNames = _lodash2["default"].map(types, function (type) {
        return type.toString();
      }).join(", ");
      return "oneOfType(" + typeNames + ")";
    };
  };
  decorate(result);
  decorate(result.isRequired);
  return result;
};

var shapeToObject = function shapeToObject(obj) {
  var result = {};
  _lodash2["default"].keys(obj).forEach(function (key) {
    var value = obj[key];
    if (_lodash2["default"].isFunction(value)) {
      result[key] = "<" + (value.type || "unknown") + ">";
    }
    if (_lodash2["default"].isPlainObject(value)) {
      result[key] = shapeToObject(value); // <== RECURSION.
    }
  });
  return result;
};

PropTypes.shape = function (shape) {
  var result = _react2["default"].PropTypes.shape(shape);
  var decorate = function decorate(obj) {
    obj.shape = shape;
    obj.toString = function () {
      var output = shapeToObject(shape);
      output = JSON.stringify(output).replace(/\"/g, "");
      return "shape(" + output + ")";
    };
  };
  decorate(result);
  decorate(result.isRequired);
  return result;
};

// ----------------------------------------------------------------------------

// Store type names.
_lodash2["default"].keys(PropTypes).forEach(function (key) {
  var prop = PropTypes[key];
  prop.type = key;
  prop.toString = function () {
    var overrides = ["oneOf", "oneOfType", "shape"];
    return _lodash2["default"].has(overrides, key) ? prop.toString() : key;
  };
});

// ----------------------------------------------------------------------------

/**
 * Performs validation on the a set of properties.
 * @param propTypes:      An object containing the property-type definiitons
 *                        or a single PropType.
 * @param props:          An object of properties to validate
 *                        or a single value of a single <propTypes> definiiton was passed.
 * @param componentName:  Optional. The name of the component being validated.
 *                        Used in error message.
 * @return {object} validation results.
 */
PropTypes.validate = function (propTypes, props, componentName) {
  if (_lodash2["default"].isFunction(propTypes)) {
    propTypes = { value: propTypes };
    props = { value: props };
  }
  return (0, _Validator2["default"])(propTypes).validate(props, componentName);
};

// ----------------------------------------------------------------------------
exports["default"] = PropTypes;
module.exports = exports["default"];
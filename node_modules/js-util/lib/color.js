"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _color = require("color");

var _color2 = _interopRequireDefault(_color);

/*
  Converts an alpha value into an `argb` color.
  @param value: The alpha value

                -1..0: Alpha percentage of black.
                 0..1: Apha percentage of white.

                If a string is passed, the string value is returned
                assuming it to be an explicit color value (no-op).

  @returns an `argb` style string.
*/
var fromAlpha = function fromAlpha(value) {
  if (!_lodash2["default"].isNumber(value)) {
    return value;
  }
  if (value < -1) {
    value = -1;
  }
  if (value > 1) {
    value = 1;
  }

  if (value === 0) {
    return "transparent";
  } else if (value < 0) {
    return "rgba(0, 0, 0, " + Math.abs(value) + ")";
  } else if (value > 0) {
    return "rgba(255, 255, 255, " + value + ")";
  }
};

exports.fromAlpha = fromAlpha;
var clampPercent = function clampPercent(value) {
  if (!_lodash2["default"].isNumber(value)) {
    return 0;
  }
  if (value < 0) {
    value = 0;
  }
  if (value > 1) {
    value = 1;
  }
  return value;
};

var NamedColor = (function () {
  function NamedColor(name) {
    _classCallCheck(this, NamedColor);

    this.name = name;
  }

  _createClass(NamedColor, [{
    key: "toString",
    value: function toString() {
      return (0, _color2["default"])(this.name).hexString();
    }
  }, {
    key: "darken",
    value: function darken(percent) {
      return (0, _color2["default"])(this.name).darken(clampPercent(percent)).hexString();
    }
  }, {
    key: "lighten",
    value: function lighten(percent) {
      return (0, _color2["default"])(this.name).lighten(clampPercent(percent)).hexString();
    }
  }]);

  return NamedColor;
})();

exports.NamedColor = NamedColor;
var color = function color(name) {
  return new NamedColor(name);
};
exports.color = color;
var white = color("white");
exports.white = white;
var black = color("black");
exports.black = black;
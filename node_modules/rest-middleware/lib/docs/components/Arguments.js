"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _Markdown = require("./Markdown");

var _Markdown2 = _interopRequireDefault(_Markdown);

/**
 * The parameters arguments for a method.
 */

var Arguments = (function (_React$Component) {
  _inherits(Arguments, _React$Component);

  function Arguments() {
    _classCallCheck(this, Arguments);

    _get(Object.getPrototypeOf(Arguments.prototype), "constructor", this).apply(this, arguments);
  }

  _createClass(Arguments, [{
    key: "render",
    value: function render() {
      var _props = this.props;
      var method = _props.method;
      var params = _props.params;

      var result = _react2["default"].createElement("div", null); // Empty (no params).

      if (params) {
        var rows = params.map(function (param, i) {
          return _react2["default"].createElement(ArgumentRow, _extends({ key: i }, param));
        });
        result = _react2["default"].createElement(
          "div",
          { className: "arguments" },
          _react2["default"].createElement(
            "div",
            { className: "title" },
            this.props.title
          ),
          _react2["default"].createElement(
            "table",
            null,
            _react2["default"].createElement(
              "tbody",
              null,
              rows
            )
          )
        );
      }
      return result;
    }
  }]);

  return Arguments;
})(_react2["default"].Component);

exports["default"] = Arguments;

Arguments.defaultProps = { title: "Arguments" };

/**
 * A single argument list item
 */

var ArgumentRow = (function (_React$Component2) {
  _inherits(ArgumentRow, _React$Component2);

  function ArgumentRow() {
    _classCallCheck(this, ArgumentRow);

    _get(Object.getPrototypeOf(ArgumentRow.prototype), "constructor", this).apply(this, arguments);
  }

  _createClass(ArgumentRow, [{
    key: "render",
    value: function render() {
      var _props2 = this.props;
      var name = _props2.name;
      var type = _props2.type;
      var description = _props2.description;

      return _react2["default"].createElement(
        "tr",
        { className: "argument-row" },
        _react2["default"].createElement(
          "td",
          { className: "label-outer" },
          _react2["default"].createElement(
            "div",
            { className: "name" },
            name
          ),
          type ? _react2["default"].createElement(
            "div",
            { className: "details" },
            type
          ) : null
        ),
        _react2["default"].createElement(
          "td",
          { className: "value-outer" },
          description ? _react2["default"].createElement(
            _Markdown2["default"],
            null,
            description
          ) : _react2["default"].createElement(
            "span",
            { className: "no-description" },
            "â€”"
          )
        )
      );
    }
  }]);

  return ArgumentRow;
})(_react2["default"].Component);

module.exports = exports["default"];
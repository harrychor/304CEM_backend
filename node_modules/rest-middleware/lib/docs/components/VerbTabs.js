"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

/**
 * A single tab button.
 */

var VerbTab = (function (_React$Component) {
  _inherits(VerbTab, _React$Component);

  function VerbTab() {
    _classCallCheck(this, VerbTab);

    _get(Object.getPrototypeOf(VerbTab.prototype), "constructor", this).apply(this, arguments);
  }

  /**
   * A horizontal list of GET|POST|PUT|DELETE display badges
   */

  _createClass(VerbTab, [{
    key: "handleClick",
    value: function handleClick() {
      var handler = this.props.onClick;
      if (handler) {
        handler({ verb: this.props.verb });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var className = "verb-tab";
      if (this.props.isSelected) {
        className += " is-selected";
      }
      return _react2["default"].createElement(
        "div",
        { className: className, onClick: this.handleClick.bind(this) },
        this.props.verb.toUpperCase()
      );
    }
  }]);

  return VerbTab;
})(_react2["default"].Component);

exports.VerbTab = VerbTab;

var VerbTabs = (function (_React$Component2) {
  _inherits(VerbTabs, _React$Component2);

  function VerbTabs(props) {
    _classCallCheck(this, VerbTabs);

    _get(Object.getPrototypeOf(VerbTabs.prototype), "constructor", this).call(this, props);
    this.state = { selectedVerb: props.selectedVerb || "get" };
  }

  _createClass(VerbTabs, [{
    key: "handleTabClick",
    value: function handleTabClick(e) {
      this.setState({ selectedVerb: e.verb });
      var handler = this.props.onChanged;
      if (_lodash2["default"].isFunction(handler)) {
        handler(e);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var method = this.props.method;

      var selectedVerb = this.state.selectedVerb;

      var verbs = ["get", "post", "put", "delete"].map(function (verb, i) {
        if (method[verb]) {
          var isSelected = verb === selectedVerb;
          return _react2["default"].createElement(VerbTab, {
            key: i + verb,
            verb: verb,
            isSelected: isSelected,
            onClick: _this.handleTabClick.bind(_this) });
        }
      });

      return _react2["default"].createElement(
        "div",
        { className: "verb-tabs" },
        _react2["default"].createElement(
          "div",
          { className: "tabs-outer" },
          _lodash2["default"].compact(verbs)
        )
      );
    }
  }]);

  return VerbTabs;
})(_react2["default"].Component);

exports["default"] = VerbTabs;